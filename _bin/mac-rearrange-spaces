#!/usr/bin/env python
#
# Usage: mac-rearrange-spaces actions
#
# The format of actions is:
#   from:to,from:to,from:to...
#  e.g.: 4:1,5:2,6:3 - this moves space at position 4 to position 1, position 5 to position 2 and position 6 to position 3

import sys
import time
import subprocess

import Quartz


# Helper Functions

def mouseEvent(type, x, y):
    mouse_event = Quartz.CoreGraphics.CGEventCreateMouseEvent(None, type, (x, y), Quartz.CoreGraphics.kCGMouseButtonLeft)
    Quartz.CoreGraphics.CGEventPost(Quartz.CoreGraphics.kCGHIDEventTap, mouse_event)

def mousemove(x, y):
    mouseEvent(Quartz.CoreGraphics.kCGEventMouseMoved, x, y);

def mousedrag(x, y):
    mouseEvent(Quartz.CoreGraphics.kCGEventLeftMouseDragged, x, y);

def mousedown(x, y):
    mouseEvent(Quartz.CoreGraphics.kCGEventLeftMouseDown, x, y);

def mouseup(x, y):
    mouseEvent(Quartz.CoreGraphics.kCGEventLeftMouseUp, x, y);

def mouse_drag(start_x, start_y, end_x, end_y, delay=0.08):
    mid_x = start_x + (end_x - start_x) / 2
    mid_y = start_y + (end_y - start_y) / 2
    mousedown(start_x, start_y);
    time.sleep(delay);
    mousedrag(start_x + 4, start_y + 4);
    mousedrag(start_x + 16, start_y + 16);
    time.sleep(delay);
    mousedrag(mid_x, mid_y);
    time.sleep(delay);
    mousedrag(end_x, end_y);
    time.sleep(delay);
    mouseup(end_x, end_y);

def run_applescript(scpt, args=[]):
    p = subprocess.Popen(['osascript', '-'] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate(scpt)
    return stdout

OPEN_MISSION_CONTROL_APPLESCRIPT = """\
tell application "System Events"
    set dock to process "Dock"
    try
        set mission_control to group 1 of dock
        false
    on error
        do shell script "/System/Applications/Mission\\\\ Control.app/Contents/macOS/Mission\\\\ Control"
        delay 0.3
        true
    end try
end tell
"""

CLOSE_MISSION_CONTROL_APPLESCRIPT = """\
tell application "System Events"
    set dock to process "Dock"
    try
        set mission_control to group 1 of dock
        do shell script "/System/Applications/Mission\\\\ Control.app/Contents/macOS/Mission\\\\ Control"
    end try
end tell
"""

def open_mission_control():
    payload = run_applescript(OPEN_MISSION_CONTROL_APPLESCRIPT)
    mousemove(4, 4)
    return payload.startswith('true')

def close_mission_control():
    run_applescript(CLOSE_MISSION_CONTROL_APPLESCRIPT)

GET_DESKTOP_N_BUTTON_POSITION_APPLESCRIPT = """\
tell application "System Events"
    set dock to process "Dock"
    try
        set mission_control to group 1 of dock
    on error
        do shell script "/System/Applications/Mission\\\\ Control.app/Contents/macOS/Mission\\\ Control"
        delay 0.3
    end try
    set mission_control to group 1 of dock
    set spaces_bar to group 2 of group 1 of mission_control
    try
        -- "Desktop n" button
        set b to button {n} of list 1 of spaces_bar
        position of b
    on error
        -- "Add Desktop" button
        set b to button 1 of spaces_bar
        position of b
    end try
end tell
"""

def get_desktop_button_position(n):
    payload = run_applescript(GET_DESKTOP_N_BUTTON_POSITION_APPLESCRIPT.format(n=n))
    coordinates = map(lambda p: p.strip(), payload.strip().split(','))
    coordinates = map(int, coordinates)
    coordinates = map(lambda p: p + 16, coordinates)
    return coordinates


# Start Script

initial_mouse_location = Quartz.CGEventGetLocation(Quartz.CGEventCreate(None))
opening_mission_control = open_mission_control()

for m in sys.argv[1].split(','):
    [from_n, to_n] = m.split(':')
    from_p = get_desktop_button_position(from_n)
    to_p = get_desktop_button_position(to_n)
    mouse_drag(*(from_p + to_p))

if opening_mission_control:
    close_mission_control()
mousemove(initial_mouse_location.x, initial_mouse_location.y)
