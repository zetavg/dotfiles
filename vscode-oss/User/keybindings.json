[
  //
  // MARK: Cursor
  //

  {
    "key": "alt+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },

  //
  // MARK: Selection
  //

  // Select all occurrences
  {
    "key": "shift+cmd+d",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "shift+cmd+d",
    "command": "-workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },

  //
  // MARK: Editing
  //

  // Move lines up
  {
    "key": "ctrl+cmd+up",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    // On macOS ctrl+cmd+up may trigger a beep due to Electron issue #2617, so we add an additional keybinding, and map ctrl+cmd+up to shift+ctrl+cmd+up via BetterTouchTool.
    "key": "shift+ctrl+cmd+up",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "-editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },

  // Move lines down
  {
    "key": "ctrl+cmd+down",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    // On macOS ctrl+cmd+down may trigger a beep due to Electron issue #2617, so we add an additional keybinding, and map ctrl+cmd+down to shift+ctrl+cmd+down via BetterTouchTool.
    "key": "shift+ctrl+cmd+down",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+down",
    "command": "-editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },

  //
  // MARK: Completion
  //

  // Do not use cmd+right to accept inline suggestions, as it conflicts with the default macOS behavior of moving the cursor to the end of the line.
  // Instead, use alt+tab to accept the next word suggestion.
  // (tab by default accepts the entire suggestion, which is not always what we want)
  {
    "key": "alt+tab",
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "cmd+right",
    "command": "-editor.action.inlineSuggest.acceptNextWord",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "alt+tab",
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "when": "cursorBeforeGhostText && inlineSuggestionVisible && !accessibilityModeEnabled && !editorReadonly"
  },
  {
    "key": "cmd+right",
    "command": "-editor.action.inlineSuggest.acceptNextWord",
    "when": "cursorBeforeGhostText && inlineSuggestionVisible && !accessibilityModeEnabled && !editorReadonly"
  },

  //
  // MARK: Find
  //

  {
    "key": "alt+c",
    "command": "toggleFindCaseSensitive",
    "when": "editorFocus"
  },
  {
    "key": "alt+w",
    "command": "toggleFindWholeWord",
    "when": "editorFocus"
  },
  {
    "key": "alt+r",
    "command": "toggleFindRegex",
    "when": "editorFocus"
  },
  {
    "key": "alt+c",
    "command": "toggleSearchCaseSensitive",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+w",
    "command": "toggleSearchWholeWord",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+r",
    "command": "toggleSearchRegex",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+p",
    "command": "toggleSearchPreserveCase",
    "when": "searchViewletFocus"
  },

  //
  // MARK: Navigate
  //

  {
    "key": "ctrl+-",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+=",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward"
  },

  //
  // MARK: Explorer
  //

  {
    "key": "shift+cmd+l",
    "command": "workbench.files.action.showActiveFileInExplorer"
  },
  {
    "key": "shift+cmd+l",
    "command": "-editor.action.selectHighlights",
    "when": "editorFocus"
  },

  //
  // MARK: Moving Focus
  //

  {
    "key": "shift+cmd+r",
    "command": "workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
    {
    "key": "shift+cmd+r",
    "command": "-rerunSearchEditorSearch",
    "when": "inSearchEditor"
  },
  {
    "key": "shift+cmd+t",
    "command": "workbench.view.extension.test"
  },

  //
  // MARK: Layout
  //

  {
    "key": "ctrl+s",
    "command": "workbench.action.cycleAuxiliaryBar"
  },
  {
    "key": "ctrl+a",
    "command": "workbench.action.cyclePanel"
  },

  //
  // MARK: Zoom
  //

  {
    "key": "cmd+0",
    "command": "workbench.action.zoomReset"
  },
  {
    "key": "cmd+0",
    "command": "-workbench.action.focusSideBar"
  },


  // MARK: Bookmarks

  {
    "key": "ctrl+f",
    "command": "bookmarks.toggle",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+r",
    "command": "bookmarks.jumpToNext",
    "when": "editorTextFocus"
  },


  // MARK: Editor Tabs

  {
    "key": "cmd+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "cmd+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "cmd+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "cmd+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "cmd+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "cmd+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "cmd+7",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "cmd+8",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "cmd+9",
    "command": "workbench.action.openEditorAtIndex9"
  },

  // MARK: Terminal

  {
    "key": "cmd+t",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+1",
    "command": "workbench.action.terminal.focusAtIndex1",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+2",
    "command": "workbench.action.terminal.focusAtIndex2",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+3",
    "command": "workbench.action.terminal.focusAtIndex3",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+4",
    "command": "workbench.action.terminal.focusAtIndex4",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+5",
    "command": "workbench.action.terminal.focusAtIndex5",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+6",
    "command": "workbench.action.terminal.focusAtIndex6",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+7",
    "command": "workbench.action.terminal.focusAtIndex7",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+8",
    "command": "workbench.action.terminal.focusAtIndex8",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+9",
    "command": "workbench.action.terminal.focusAtIndex9",
    "when": "terminalFocus"
  },

  // MARK: Copilot Chat

  {
    "key": "shift+tab",
    "command": "workbench.action.chat.toggleAgentMode",
    "when": "chatIsEnabled && inChatInput && !chatSessionRequestInProgress && chatLocation == 'panel'"
  },

  //
  // MARK: Format & Auto-fix
  //

  // ESLint autofix
  {
    "key": "shift+alt+f",
    "when": "editorTextFocus && !inBiomeProject && (editorLangId == typescript || editorLangId == typescriptreact || editorLangId == javascript || editorLangId == javascriptreact)",
    "command": "runCommands",
    "args": {
      "commands": [
        "editor.action.formatDocument",
        "eslint.executeAutofix"
      ]
    }
  },

  // Biome autofix
  {
    "key": "shift+alt+f",
    "when": "editorTextFocus && inBiomeProject && (editorLangId == typescript || editorLangId == typescriptreact || editorLangId == javascript || editorLangId == javascriptreact)",
    "command": "runCommands",
    "args": {
      "commands": [
        "editor.action.formatDocument",
        // The Biome VSCode plugin didn't provide a autofix command as ESLint does, so we have rely on the fix-all source action provided by VSCode.
        {
          "command": "editor.action.sourceAction", // Note: Still need to set "Editor: Default Formatter" manually in workspace settings
          "args": {
            "kind": "source.fixAll",
            "apply": "first" // Do not show picker, apply the first fix, which normally is what we want.
          }
        }
      ]
    }
  },
]
