#!/usr/bin/env bash
#
# Install dotfiles.

set -e

BASEDIR=$(cd "$(dirname "$0")"; pwd)

##
# Functions
##

# Function to echo a message for a phase
phase() {
  printf "\\n$(tput bold)$(tput sgr 0 1)%s$(tput sgr0)\\n" "$@"
}

# Function to run a command respecting the DRY_RUN environment variable
run_command() {
  local command="$1"
  if [[ -z "$DRY_RUN" ]]; then
    bash -c "$command"
  else
    echo "  dry-run: not actually running \`$command\`"
  fi
}

# Function to create symbolic link and backups the target if something already exists there
link() {
  local source="$1"
  local target="$2"
  echo "[Link] $source â†’ $target"

  if [[ -e "$target" ]] && [[ ! -L "$target" ]]; then
    local backup_name
    backup_name="$target.$(date +%Y%m%d_%H%M%S).bak"
    echo "  creating backup: $backup_name"
    run_command "mv -f '$target' '$backup_name'"
  elif [[ -L "$target" ]]; then
    echo "  overriding existing symbolic link"
    run_command "rm '$target'"
  fi

  local target_dir
  target_dir="$(dirname "$target")"
  if [[ ! -d "$target_dir" ]]; then
    echo "  target directory does not exist, creating"
    run_command "mkdir -p '$target_dir'"
  fi

  run_command "ln -sf '$source' '$target'"
}

##
# Main Phases
##

echo "[Dotfiles Installation]"

# Switch to the dotfiles directory
cd "$BASEDIR"

# Check if git exists
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "Error: can't find git."
  exit -1
fi

phase "Preparing Git Submodules"

git submodule init
git submodule update
echo "submodules ready"

phase "Link General Files"

for i in _*; do
  # Skip _config (handled separately)
  if [[ "$i" == "_config" ]]; then
    continue
  fi

  source="$BASEDIR/$i"
  target="$HOME/${i/#_/.}"
  link "$source" "$target"
done

phase "Link .config/ Files"

for i in _config/*; do
  source="$BASEDIR/$i"
  target="$HOME/${i/#_config/.config}"
  link "$source" "$target"
done

if [[ $(uname) == "Darwin" ]]; then
  phase "Build and link User Scripts for macOS"
  mac_jxa_dir="$BASEDIR/mac/JXA"

  cd "$mac_jxa_dir"
  for i in *.js; do
    name=${i/.js/}
    osacompile -l JavaScript -o "$name.scptd" "$i"
    osacompile -l JavaScript -o "$name.app" "$i"
  done
  cd "$BASEDIR"

  link "$mac_jxa_dir" "$HOME/Library/JXA"
fi

phase "Link User Packages for Sublime Text 3"

if [[ -d "$BASEDIR/subl3/Packages" ]]; then
  subl_source_packages_dir="$BASEDIR/subl3/Packages"
  if [[ $(uname) == "Darwin" ]]; then
    subl_target_packages_dir="$HOME/Library/Application Support/Sublime Text 3/Packages"
  else
    subl_target_packages_dir="$HOME/.config/sublime-text-3/Packages"
  fi

  cd "$subl_source_packages_dir"
  for i in *; do
    link "$subl_source_packages_dir/$i" "$subl_target_packages_dir/$i"
  done
  cd "$BASEDIR"
fi

phase "Link User Directory for VSCode"

if [[ -d "$BASEDIR/vscode/User" ]]; then
  source="$BASEDIR/vscode/User"
  if [[ $(uname) == "Darwin" ]]; then
    target="$HOME/Library/Application Support/Code/User"
  else
    # TODO: Support other OS?
    target="/tmp/null"
  fi
  link "$source" "$target"
fi

if [[ -d "$BASEDIR/vscode-oss/User" ]]; then
  source="$BASEDIR/vscode-oss/User"
  if [[ $(uname) == "Darwin" ]]; then
    target_1="$HOME/Library/Application Support/Code - OSS/User"
    target_2="$HOME/Library/Application Support/code-oss/User"
    target_3="$HOME/Library/Application Support/VSCodium/User"
  else
    # TODO: Support other OS?
    target_1="/tmp/null"
    target_2="/tmp/null"
    target_3="/tmp/null"
  fi
  link "$source" "$target_1"
  link "$source" "$target_2"
  link "$source" "$target_3"
fi

phase "Process Secret Dotfiles"

if [[ -d "$BASEDIR/secret" ]]; then

  echo "removing all permissions for group/world on secret dotfiles"
  chmod -R o-r "$BASEDIR/secret"
  chmod -R o-w "$BASEDIR/secret"
  chmod -R o-x "$BASEDIR/secret"
  chmod -R g-r "$BASEDIR/secret"
  chmod -R g-w "$BASEDIR/secret"
  chmod -R g-x "$BASEDIR/secret"

  phase "Link Files From Secret Dotfiles"

  for i in secret/_*
  do
    source="$BASEDIR/$i"
    target="$HOME/${i/secret\/_/.}"
    link "$source" "$target"
  done

  phase "Run Installation Script for Secret Dotfiles"

  if [[ -x "$BASEDIR/secret/install" ]]; then
    echo "running $BASEDIR/secret/install..."
    export -f phase
    export -f run_command
    export -f link
    "$BASEDIR/secret/install"
  else
    echo "$BASEDIR/secret/install is not an executable, skipping"
  fi

else
  echo "$BASEDIR/secret does not exist, skipping"
  echo "place your secret dotfiles in $BASEDIR/secret before running install if you want them to got taken care of"
fi

echo ""
echo "[Done]"
