// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        // On macOS ctrl+cmd+up may trigger a beep due to Electron issue #2617, so we add an additional keybinding, and map ctrl+cmd+up to shift+ctrl+cmd+up via BetterTouchTool.
        "key": "shift+ctrl+cmd+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        // On macOS ctrl+cmd+down may trigger a beep due to Electron issue #2617, so we add an additional keybinding, and map ctrl+cmd+down to shift+ctrl+cmd+down via BetterTouchTool.
        "key": "shift+ctrl+cmd+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+cmd+down",
        "command": "workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "-workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+alt+cmd+up",
        "command": "workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "-workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+alt+cmd+down",
        "command": "notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "-notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+cmd+down",
        "command": "notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "-notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+=",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+1 cmd+1",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "cmd+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "cmd+0",
        "command": "workbench.action.zoomReset"
    },
    {
        "key": "cmd+numpad0",
        "command": "-workbench.action.zoomReset"
    },
    {
        "key": "alt+cmd+v",
        "command": "editor.action.clipboardPasteAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+r",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "shift+cmd+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "alt+l",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+c",
        "command": "toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "-toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "cmd+; alt+c",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+c",
        "command": "-gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "ctrl+cmd+s",
        "command": "toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+l",
        "command": "-toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "cmd+; alt+s",
        "command": "gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "alt+s",
        "command": "-gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+cmd+w",
        "command": "toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+w",
        "command": "toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "-toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+cmd+r",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+r",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "-toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+cmd+c",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+c",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "-toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    // It's less common that we want to toggle the activity bar, so we re-map ctrl+a to toggle the auxiliary bar (aka secondary side bar), and add alt to the original ctrl+a to toggle the activity bar.
    {
      "key": "ctrl+alt+a",
      "command": "workbench.action.toggleActivityBarVisibility"
    },
    {
        "key": "ctrl+a",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "alt+cmd+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+d",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+f",
        "command": "bookmarks.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+k",
        "command": "-bookmarks.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+r",
        "command": "bookmarks.jumpToNext",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+l",
        "command": "-bookmarks.jumpToNext",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+tab",
        "command": "editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "cmd+right",
        "command": "-editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "shift+cmd+t",
        "command": "workbench.view.extension.test"
    },
    {
        "key": "cmd+; shift+cmd+r",
        "command": "rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "cmd+0",
        // "command": "workbench.action.openLastEditorInGroup"
    },
    {
        "key": "cmd+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "cmd+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "cmd+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "cmd+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "cmd+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "cmd+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "cmd+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "cmd+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+1",
        "command": "workbench.action.terminal.focusAtIndex1",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+2",
        "command": "workbench.action.terminal.focusAtIndex2",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+3",
        "command": "workbench.action.terminal.focusAtIndex3",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+4",
        "command": "workbench.action.terminal.focusAtIndex4",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+5",
        "command": "workbench.action.terminal.focusAtIndex5",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+6",
        "command": "workbench.action.terminal.focusAtIndex6",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+7",
        "command": "workbench.action.terminal.focusAtIndex7",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+8",
        "command": "workbench.action.terminal.focusAtIndex8",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.terminal.focusAtIndex9",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+; shift+c",
        "command": "workbench.panel.chat.view.copilot.focus"
    },
    {
        "key": "cmd+' cmd+f",
        "command": "list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "cmd+f",
        "command": "-list.find",
        "when": "listFocus && listSupportsFind"
    },
    // ESLint autofix
    {
        "key": "shift+alt+f",
        "when": "editorTextFocus && !inBiomeProject && (editorLangId == typescript || editorLangId == typescriptreact || editorLangId == javascript || editorLangId == javascriptreact)",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.formatDocument",
                "eslint.executeAutofix"
            ]
        }
    },
    // Biome autofix
    {
        "key": "shift+alt+f",
        "when": "editorTextFocus && inBiomeProject && (editorLangId == typescript || editorLangId == typescriptreact || editorLangId == javascript || editorLangId == javascriptreact)",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.formatDocument",
                // The Biome VSCode plugin didn't provide a autofix command as ESLint does, so we have rely on the fix-all source action provided by VSCode.
                {
                    "command": "editor.action.sourceAction", // Note: Still need to set "Editor: Default Formatter" manually in workspace settings
                    "args": {
                        "kind": "source.fixAll",
                        "apply": "first" // Do not show picker, apply the first fix, which normally is what we want.
                    }
                }
            ]
        }
    },
]
